// ----------------------------------------------------------------------------
pub(super) const BRUSH_SIZE_MIN: u8 = 1;
pub(super) const BRUSH_SIZE_MAX: u8 = 250;
// ---------------------------------------------------------------------------
use bevy::prelude::Color;
// ---------------------------------------------------------------------------
#[derive(Clone, Copy)]
pub(super) struct BrushSize(u8);
// ----------------------------------------------------------------------------
pub(super) struct PointerSettings {
    pub size: BrushSize,
    pub ring_width: f32,
    pub color: Color,
}
// ----------------------------------------------------------------------------
impl PointerSettings {
    // ------------------------------------------------------------------------
    pub fn radius(&self) -> f32 {
        self.size.to_f32() * 0.5
    }
    // ------------------------------------------------------------------------
    pub fn ring_width(&self) -> f32 {
        self.ring_width
    }
    // ------------------------------------------------------------------------
    pub fn color(&self) -> Color {
        self.color
    }
    // ------------------------------------------------------------------------
}
// ----------------------------------------------------------------------------
impl BrushSize {
    // ------------------------------------------------------------------------
    pub fn to_u8(self) -> u8 {
        self.0
    }
    // ------------------------------------------------------------------------
    pub fn to_f32(self) -> f32 {
        self.0 as f32
    }
    // ------------------------------------------------------------------------
    pub fn scale(&mut self, v: f32) {
        self.0 = BRUSH_SIZE_MIN
            .max((self.0 as f32 + v * (self.0 as f32 * 0.05).max(1.0)) as u8)
            .min(BRUSH_SIZE_MAX);
    }
    // ------------------------------------------------------------------------
    pub fn ring_width(&self) -> f32 {
        ((self.0 as f32 / BRUSH_SIZE_MAX as f32) * 10.0)
            .max(0.5)
            .min(10.0)
    }
    // ------------------------------------------------------------------------
    pub(super) fn as_mut(&mut self) -> &mut u8 {
        &mut self.0
    }
    // ------------------------------------------------------------------------
}
// ----------------------------------------------------------------------------
// Default impl
// ----------------------------------------------------------------------------
impl Default for BrushSize {
    fn default() -> Self {
        Self(2)
    }
}
// ----------------------------------------------------------------------------
